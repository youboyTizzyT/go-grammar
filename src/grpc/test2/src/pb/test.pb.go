// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

/*
Package test is a generated protocol buffer package.

定义包名

It is generated from these files:
	test.proto

It has these top-level messages:
	Req
	Res
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 定义 Req 消息结构
type Req struct {
	// 类型 字段 = 标识号
	JsonStr string `protobuf:"bytes,1,opt,name=jsonStr" json:"jsonStr,omitempty"`
}

func (m *Req) Reset()                    { *m = Req{} }
func (m *Req) String() string            { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()               {}
func (*Req) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Req) GetJsonStr() string {
	if m != nil {
		return m.JsonStr
	}
	return ""
}

// 定义 Res 消息结构
type Res struct {
	BackJson string `protobuf:"bytes,1,opt,name=backJson" json:"backJson,omitempty"`
}

func (m *Res) Reset()                    { *m = Res{} }
func (m *Res) String() string            { return proto.CompactTextString(m) }
func (*Res) ProtoMessage()               {}
func (*Res) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Res) GetBackJson() string {
	if m != nil {
		return m.BackJson
	}
	return ""
}

func init() {
	proto.RegisterType((*Req)(nil), "test.Req")
	proto.RegisterType((*Res)(nil), "test.Res")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Waiter service

type WaiterClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (Waiter_StreamClient, error)
	Once(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
}

type waiterClient struct {
	cc *grpc.ClientConn
}

func NewWaiterClient(cc *grpc.ClientConn) WaiterClient {
	return &waiterClient{cc}
}

func (c *waiterClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Waiter_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Waiter_serviceDesc.Streams[0], c.cc, "/test.Waiter/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &waiterStreamClient{stream}
	return x, nil
}

type Waiter_StreamClient interface {
	Send(*Req) error
	Recv() (*Res, error)
	grpc.ClientStream
}

type waiterStreamClient struct {
	grpc.ClientStream
}

func (x *waiterStreamClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waiterStreamClient) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waiterClient) Once(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := grpc.Invoke(ctx, "/test.Waiter/Once", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Waiter service

type WaiterServer interface {
	Stream(Waiter_StreamServer) error
	Once(context.Context, *Req) (*Res, error)
}

func RegisterWaiterServer(s *grpc.Server, srv WaiterServer) {
	s.RegisterService(&_Waiter_serviceDesc, srv)
}

func _Waiter_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaiterServer).Stream(&waiterStreamServer{stream})
}

type Waiter_StreamServer interface {
	Send(*Res) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type waiterStreamServer struct {
	grpc.ServerStream
}

func (x *waiterStreamServer) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waiterStreamServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Waiter_Once_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaiterServer).Once(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.Waiter/Once",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaiterServer).Once(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _Waiter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.Waiter",
	HandlerType: (*WaiterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Once",
			Handler:    _Waiter_Once_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Waiter_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}

func init() { proto.RegisterFile("test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0xe4, 0xb9, 0x98, 0x83, 0x52,
	0x0b, 0x85, 0x24, 0xb8, 0xd8, 0xb3, 0x8a, 0xf3, 0xf3, 0x82, 0x4b, 0x8a, 0x24, 0x18, 0x15, 0x18,
	0x35, 0x38, 0x83, 0x60, 0x5c, 0x25, 0x45, 0x90, 0x82, 0x62, 0x21, 0x29, 0x2e, 0x8e, 0xa4, 0xc4,
	0xe4, 0x6c, 0xaf, 0xe2, 0xfc, 0x3c, 0xa8, 0x0a, 0x38, 0xdf, 0xc8, 0x8b, 0x8b, 0x2d, 0x3c, 0x31,
	0xb3, 0x24, 0xb5, 0x48, 0x48, 0x89, 0x8b, 0x2d, 0xb8, 0xa4, 0x28, 0x35, 0x31, 0x57, 0x88, 0x53,
	0x0f, 0x6c, 0x55, 0x50, 0x6a, 0xa1, 0x14, 0x9c, 0x59, 0xac, 0xc1, 0x68, 0xc0, 0x28, 0x24, 0xc3,
	0xc5, 0xe2, 0x9f, 0x97, 0x9c, 0x8a, 0x5d, 0x45, 0x12, 0x1b, 0xd8, 0x71, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x24, 0xb9, 0xa2, 0xdb, 0xaa, 0x00, 0x00, 0x00,
}
